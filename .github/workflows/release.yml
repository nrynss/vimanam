name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Vimanam ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            # Vimanam ${{ github.ref_name }}

            OpenAPI/Swagger JSON to Markdown documentation generator.

            ## Features:
            - Convert OpenAPI JSON files to Markdown documentation
            - Group endpoints by service or HTTP method
            - Filter by service, path, or method
            - Multiple detail levels (summary, basic, standard, full)
            - Sorting options for endpoints

            ## Downloads:
            Binaries for Linux, macOS (Intel & Apple Silicon), and Windows are attached to this release.

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux (x86_64)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: vimanam
            asset_name: vimanam-linux-x86_64

          # Windows (x86_64)
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: vimanam.exe
            asset_name: vimanam-windows-x86_64.exe

          # macOS (Intel x86_64)
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: vimanam
            asset_name: vimanam-macos-x86_64

          # macOS (ARM64 / Apple Silicon)
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: vimanam
            asset_name: vimanam-macos-arm64

    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream
